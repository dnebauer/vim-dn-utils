*dn-utils-plugin.txt*	For Vim version 7.3	Last changed: 2016 July 30

Dn library of vim utilities                       *dn-utils* *vim-dn-utils*

1. Overview        |dn-utils-overview|
2. Variables       |dn-utils-variables|
3. Functions       |dn-utils-functions|
4. Mappings        |dn-utils-mappings|
5. Commands        |dn-utils-commands|

==============================================================================
1. Overview                                               *dn-utils-overview*

A plugin to provide useful generic functions. It is intended to be available
to all files being edited.

These functions were developed over time by the author and later combined into
a library.

All functions in this library are global. They all have the prefix "dn#util#"
to try and avoid namespace collisions.

Some mappings and autocommands are also provided.

==============================================================================
2. Variables                                             *dn-utils-variables*

The plugin provides some useful convenience variables that can be used by
other plugins.

                                                     *g:dn-true* *g:dn-false*
Boolean global variables g:dn_true and g:dn_false save script writers from
having to remember the boolean values used by vim.
(Note: false = 0 and true = non-zero integer.)

The extensible help system relies on global Dictionary variables
g:dn_help_pluginsg g:dn_help_topics and g:dn_help_data. See |dn#util#help()|
for more details.

==============================================================================
3. Functions                                             *dn-utils-functions*

This is a list of functions grouped by what they are used for. There is an
alphabetical list here: |dn-utils-function-list|. Use CTRL-] on the function
name to jump to detailed help on it.

Dates:                                              *dn-utils-date-functions*
    dn#util#insertCurrentDate() insert current date in ISO format
    dn#util#nowYear()           get current year
    dn#util#nowMonth()          get current month
    dn#util#nowDay()            get current day in month
    dn#util#dayOfWeek()         get name of weekday

Files and directories:                              *dn-utils-file-functions*
                                               *dn-utils-directory-functions*
    dn#util#getFilePath()       get filepath of file being edited
    dn#util#getFileDir()        get directory of file being edited
    dn#util#getFileName()       get name of file being edited
    dn#util#getRtpDir()         finds directory from runtimepath
    dn#util#getRtpFile()        finds file(s) in directories under 'rtp'

User interaction:                       *dn-utils-user-interaction-functions*
    dn#util#showMsg()           display message to user
    dn#util#error()             display error message
    dn#util#warn()              display warning message
    dn#util#prompt()            display prompt message
    dn#util#wrap()              echoes text but wraps it sensibly
    dn#util#menuSelect()        select item from menu
    dn#util#menuAddOption()     add option to menu
    dn#util#menuAddSubmenu()    add submenu to menu
    dn#util#consoleSelect()     select item from list using the console
    dn#util#help()              user can select from help topics
    dn#util#getSelection()      returns currently selected text

Lists                                               *dn-utils-list-functions*
    dn#util#listExchangeItems() exchange two elements in the same list
    dn#util#listSubtract()      subtract one list from another
    dn#util#listToScreen()      formats list for screen display
    dn#util#listToScreenColumns()
                                formats list for coloumnar screen display

Programming:                                 *dn-utils-programming-functions*
    dn#util#unusedFunctions()   checks for uncalled functions
    dn#util#insertMode()        switch to insert mode
    dn#util#executeShellCommand()
                                execute shell command
    dn#util#scriptNumber()      get SID of given script
    dn#util#filetypes()         get list of available filetypes
    dn#util#showFiletypes()     display list of available filetypes
    dn#util#runtimepaths()      get list of runtime paths
    dn#util#showRuntimepaths()  display list of runtime paths
    dn#util#updateUserHelpTags()
                                rebuild help tags in rtp "doc" subdirs
    dn#util#os()                determine operating system family
    dn#utilis#isWindows()       determine whether using windows OS
    dn#utilis#isUnix()          determine whether using unix-like OS

Version control:                                     *dn-utils-git-functions*
                                                     *dn-utils-vcs-functions*
    dn#util#localGitRepoFetch() perform a fetch on a local git repository
    dn#util#localGitRepoUpdatedRecently()
                                check that a local repo has been updated

String manipulation:                              *dn-utils-string-functions*
    dn#util#stripLastChar()     removes last character from string
    dn#util#insertString()      insert string at current cursor location
    dn#util#trimChar()          removes leading and trailing chars
    dn#util#entitise()          replace special html chars with entities
    dn#util#deentitise()        replace html entities with characters
    dn#util#stringify()         convert variable to string
    dn#util#matchCount()        finds number of occurrences of string
    dn#util#padInternal()       pad string at internal location
    dn#util#padLeft()           left pad string               
    dn#util#padRight()          right pad string               
    dn#util#globalSubstitution()
                                perform global substitution in file
    dn#util#changeHeaderCaps()  changes capitalisation of line
                                or visual selection

Numbers                                           *dn-utils-number-functions*
    dn#util#validPosInt()       check whether input is valid positive int

Miscellaneous:                             *dn-utils-miscellaneous-functions*
    dn#util#selectWord()        select |:<cword>| under cursor
    dn#util#varType()           get variable type
    dn#util#testFn()            utility function used for testing only

Function list (alphabetical)                         *dn-utils-function-list*

See |dn-utils-functions| for a list grouped by what the function is used for.

dn#util#changeHeaderCaps({mode})                 *dn-util-changeHeaderCaps()*
        Changes the capitalisation of a visual selection, if present, or the
        current line. The user is asked to choose the capitalisation type:
        upper case, lower case, capitalise every word, sentence case, or title
        case:

          capitalisation type       example ~
                upper          TO BE OR NOT TO BE
                lower          to be or not to be
                sentence       To be or not to be
                start          To Be Or Not To Be
                title          To Be or not to Be

        Capitalisation type "sentence" capitalises the first word only,
        "start" capitalises all words, while "title" capitalises the first and
        last words, and all other words except for articles, prepositions and
        conjunctions of fewer than five letters.
        If a visual selection is being processed newlines are preserved.
        The calling {mode} is required and can be "n", "v" or "i".

                                                            *<LocalLeader>hc*
        This function is mapped by default to "<LocalLeader>hc", usually
        "\hc", in Insert, Normal and Visual modes.

                                                    *dn#util#consoleSelect()*
dn#util#consoleSelect({single}, {plural}, {items}[, {method}])
        Select an item from a list using the console. Returns the selected
        item, or "" if no item is selected.  {single} and {plural} are used in
        the user interface as the singular and collective nouns for the
        {items} being selected from. Both {single} and {plural} are Strings.
        {items} is a |List| of the items to choose from. Individual items can
        contain spaces.

        The selection {method} is optional. It can be "filter" (default) or
        "complete". Both methods require perl to be installed on the system
        and use the perl script "vim-dn-utils-console-select" installed as
        part of this plugin. The two methods select the list item differently:

            filter    enables the user to type a fragment of the item and uses
                      Term::Clui::choose to enable the user select from a list
                      of matching items

            complete  uses the Term::Complete::complete function which uses
                      word completion

        Example: >
        let l:element = dn#util#consoleSelect("element name",
                \ "element names", l:items, "complete")
<
dn#util#dayOfWeek({year}, {month}, {day})               *dn#util#dayOfWeek()*
        Returns the name of the week day as a String. {year} is a 4-digit
        integer, {month} and {day} are integers.

dn#util#deentitise({text})                             *dn#util#deentitise()*
        Take {text} string and replaces any html entities it contains with the
        equivalent character:

          character   HTML entity ~
              "          &quot;
              '          &apos;
              <          &lt;
              >          $gt;
              &          &amp;

        Returns altered text string.

dn#util#entitise({text})                                 *dn#util#entitise()*
        Take {text} string and replaces any special html characters with html
        entities. See |dn#util#deentitise()| for details.  Return the altered
        text string.

dn#util#error({msg})                                        *dn#util#error()*
        Displays error message in error highlighting accompanied by system
        bell. The {msg} is expected to be a string or List of strings. Any
        non-string values are stringified with |dn#util#stringify()|. Each
        string obtained from {msg} is output on a separate line.

dn#util#executeShellCommand({cmd}[, {msg}])   *dn#util#executeShellCommand()*
        Executes a shell command ({cmd}, String) and returns the result as a
        vim boolean (the reverse of posix shell return values).
        If the shell command returns a failure code the error message {msg} is
        displayed (defaults to 'Error occurred:') followed by the shell
        feedback from the command.

dn#util#filetypes()                                     *dn#util#filetypes()*
        Return list of available filetypes.

dn#util#getFileDir()                                   *dn#util#getFileDir()*
        Returns the path of the directory in which the file being edited
        resides.

dn#util#getFileName()                                 *dn#util#getFileName()*
        Return the name of the file being edited.

dn#util#getFilePath()                                 *dn#util#getFilePath()*
        Return the path of the file eing edited.

dn#util#getRtpDir({subdir}[, {multiple}])               *dn#util#getRtpDir()*
        Finds all occurrences of the subdirectory {subdir} directly under the
        directories that make up the 'runtimepath'. If multiple matches are
        found the user is required to select one (default behaviour) or, if
        {multiple} is present and non-zero, returns a |List| of all matches
        (even if there is only one match).

        Uses globpath(&runtimepath, "{subdir}") to search for matches so it is
        possible to include wildcards in the directory name.

dn#util#getRtpFile({file}[, {multiple}])               *dn#util#getRtpFile()*
        Finds all occurrences of the {file} under the directories that make up
        the 'runtimepath'. If multiple matches are found the user is required
        to select one (default behaviour) or, if {multiple} is present and
        non-zero, returns a |List| of all matches (even if there is only one
        match).  Uses globpath(&runtimepath, "**/{file}") to search for
        matches.

dn#util#getSelection()                               *dn#util#getSelection()*
        Returns the currently selected text, or "" if no text is currently
        selected.
        This function can return a multi-line string. Subsidiary functions
        that use the return value from "getSelection" and are called via a
        mapping can have a range assigned, which may result in the subsidiary
        function being called once per line if it does not handle the range.
        See |:call| and |function-range-example| for more details.

                                               *dn#util#globalSubstitution()*
dn#util#globalSubstitution({pattern}, {substitution})
        Performs a global substitition in the current file. When finished
        returns the cursor to its position before the operation.

                                        *g:dn-help-plugins* *g:dn-help-topics*
dn#util#help([{insert}])                     *g:dn-help-data* *dn#util#help()*
        Enable user to select from previously defined help topics to display
        custom help. The {insert} argument indicates whether the function was
        called from insert mode (default is false).  This is an extensible
        help system relying on global Dictionary variables g:dn_help_plugins,
        g:dn_help_topics and g:dn_help_data:

          g:dn_help_plugins  a |List| of all plugins contributing help
          g:dn_help_topics   will be submitted to |dn#util#menuSelect()| to
                             obtain a unique value
          g:dn_help_data     has as keys the unique values returned by
                             g:dn_help_topics, and as values Lists with the
                             help text to be returned

        The |List| help data is output as concatenated text. To insert a
        newline use an empty list element (""). Other plugins can add to the
        help variables and so take advantage of the help system. The most
        friendly way to do this is for the g:dn_help_topics variable to have a
        single top-level menu item reflecting the plugin name/type, and for
        the topic values to be made unique by appending to each a prefix
        unique to its plugin.

        Example: >
        " this is example script for the foo plugin
        " add plugin name to list of plugins contributing help
        if !exists("g:dn_help_plugins")
          let g:dn_help_plugins = {}
        endif
        if index(g:dn_help_plugins, "foo", g:dn_true) == -1
          call add(g:dn_help_plugins, "foo")
        endif
        " add help topics for foo plugin to help menu
        " note that "foo" is a top level menu item
        " all help topics are in its submenu
        " all "leaf" entries have to be unique across ALL topics
        " all topics for this plugin get a unique prefix/namespace
        if !exists("g:dn_help_topics")
          let g:dn_help_topics = {}
        endif
        let g:dn_help_topics["foo"]
                    \ = { "how to wibble": "foo_wibble" }
        " add help data for each help topic
        if !exists("g:dn_help_data")
          let g:dn_help_data = {}
        endif
        let g:dn_help_data["foo_wibble"] =
                    \ [ "How to wibble:", "", "Details..." ]
<
                                                            *<LocalLeader>hh*
        This function is mapped by default to "<LocalLeader>hh", usually
        "\hh", in both Insert and Normal modes.

dn#util#insertCurrentDate([{insert}])           *dn#util#insertCurrentDate()*
        Inserts the current date in ISO format (yyyy-mm-dd). {insert}
        indicates whether the function was called from insert mode (default is
        false).

dn#util#insertMode([{skip}])                           *dn#util#insertMode()*
        Switches to insert mode. {skip} is how many character to the right to
        move ("skip") before entering insert mode. This function is often used
        by other functions if they were called from insert mode. In such cases
        it will usually be invoked with one right skip to compensate for the
        left skip that occured when initially escaping from insert mode

dn#util#insertString({text}[, {restrict}])           *dn#util#insertString()*
        Insert string {text} at current cursor location. {restrict} is a
        boolean that indicates whether to use the 'paste' setting (default is
        true).

        Example: >
        function! doSomething(...)
            let l:insert = (a:0 > 0 && a:1) ? 1 : 0
            ...
            call dn#util#insertString(l:string)
            if l:insert | call dn#util#insertMode() | endif
        endfunction
<
                                                           *dn#util#isUnix()*
dn#util#isUnix()
        Determine whether operating system is unix.

                                                        *dn#util#isWindows()*
dn#util#isWindows()
        Determine whether operating system is windows.

                                                *dn#util#listExchangeItems()*
dn#util#listExchangeItems({list}, {index1}, {index2})
        Exchange two elements, at {index1} and {index2} in the same {list}.
        Returns a boolean value indicating whether the items were successfully
        exchanged. The original list is modified in place.

dn#util#listSubtract({list1}, {list2})               *dn#util#listSubtract()*
        Subtract {list2} from {list1}. Returns resulting list.

                                                     *dn#util#listToScreen()*
dn#util#listToScreen({list}[, {width}[, {indent}[, {delimiter}]]])
        Formats {list} items for screen display. Returns a String containing
        the items separated by {delimiter} (default is space), each line
        starting with {indent} number of spaces (default is none), and each
        line wrapping at or before {width} (default is 60) with a newline
        ("\n").

                                              *dn#util#listToScreenColumns()*
dn#util#listToScreenColumns({list}[, {width}[, {padding}[, {indent}]]])
        Formats {list} items for screen display. Returns a String containing
        the items arranged in columns. The maximum length of each line is
        given by {width} (default is 60). {padding} is the number of spaces
        separating each column (default is 1). Column width equals the length
        of the longest list item plus {padding}.  It is possible to indent
        each line of output; {indent} is the number of spaces inserted at the
        beginning of each line (defaults to 0). Each line of output ends with
        a newline ("\n").

dn#util#localGitRepoFetch({dir}[, {prefix}])    *dn#util#localGitRepoFetch()*
        Perform a git fetch on a local git repository. The path to the ".git"
        subdirectory of the repository is given in {dir}.  Error messages are
        reported to the user. The error messages can be prepended by a string.
        This defaults to "dn-utils: " but can be replaced by {prefix}. The
        prefix must include any additional punctuation such as ": ".
        The return value is a vim boolean indicating whether the fetch
        operation was successful.

                                      *dn#util#localGitRepoUpdatedRecently()*
dn#util#localGitRepoUpdatedRecently({dir}, {time}[, {prefix}])
        Determine whether a local git repository has been updated within a
        given time period. The root directory of the repository is provided in
        {dir}. The {time} period to use is given in whole seconds. For
        example, a week is 604,800 seconds (but do not include commas in the
        {time} value).

        Python is required by this function. Error messages will be displayed
        if python is absent on the system or if a python command fails or
        returns unexpected output. Other possible errors include the
        ".git/FETH_HEAD" file missing from the repository root directory {dir}
        and invalid {time} values.

        Error messages are reported to the user. The error messages can be
        prepended by a string. This defaults to "dn-utils: " but can be
        replaced by {prefix}. The prefix must include any additional
        punctuation such as ": ". The return value is a vim boolean indicating
        whether the fetch operation was successful. The return value is a vim
        boolean indicating whether the repository was updated within the given
        {time} period.

dn#util#matchCount({haystack}, {needle})               *dn#util#matchCount()*
        Finds the number of occurrences of substring {needle}  in string
        {haystack}. Returns an integer value.

                                                    *dn#util#menuAddOption()*
dn#util#menuAddOption({menu}, {option}, [{retval}])
        Helper function for use in constructing a menu variable for use with
        the |dn#util#menuSelect()| function. The {menu} can be a List or
        Dictionary and is edited in place, i.e., it is not necessary to set
        the menu variable to the return value of this function. In fact, this
        function does not return a value.

        When constructing a menu it is possible for a menu option to return
        its own value or an associated value ({retval}). If the menu option is
        returning its own value there is no need to provide {retval}. 

        Example: >
        call dn#util#menuAddOption(l:menu, l:option)
<
                                                   *dn#util#menuAddSubmenu()*
dn#util#menuAddSubmenu({menu}, {header}, {submenu})
        Helper function for use in constructing a menu variable for use
        with the |dn#util#menuSelect()| function. The {menu} can be a List
        or Dictionary and is edited in place, i.e., it is not necessary to
        set the menu variable to the return value of this function. In
        fact, this function does not return a value.

        Both {menu} and {submenu} can be Lists or Dictionaries in any
        combination. The {header} is a simple string (or number).

        Example usage: >
        call dn#util#menuAddSubmenu(l:menu, l:header, l:submenu)

dn#util#menuSelect({items}[, {prompt}])                *dn#util#menuSelect()*
        Select an item from a menu, or menus, of items. Depending on the
        structure of {items} any menu item, when selected, may return that
        value, another defined value, or open a submenu.

        The menu {items} can be provided as a |List| or |Dictionary|. A List
        can contain Lists and Dictionaries as elements as well as Strings and
        Numbers. Dictionaries can contain Lists and Dictionaries as values as
        well as Strings and Numbers. Dictionaries and Lists can be nested
        arbitrarily deep (subject to some limitations described below). All
        Dictionary keys must be Strings, as required by vim (see |E713|).

        Any List in {items} can contain the following elements:

            Simple string (or number)
                These are simple menu options which, when selected, return
                their own value.

            Single-item Dictionary with a simple value
                In this Dictionary the value is a simple string (or number).
                The key is displayed in the menu and, if selected, the
                associated value is returned.

            List or Dictionary intended to be a submenu
                This element must be preceded by two associated elements.  The
                first is a specific token to tell the function a submenu is
                about to be defined. This token is "__!_SUBMENU_!_TOKEN_!__".
                (The enclosing quotes are not part of the token.) This token
                element is followed by a simple string (or number) element
                containing the submenu header. Thus, a submenu is defined in a
                List by the following three consecutive elements:
                submenu_token, submenu_header, submenu_list_or_dict

        Dictionaries in {items} are easier to understand. The special case of
        a single-item Dictionary with a simple value being used as a List menu
        item is explained above. When a Dictionary provides a menu, however,
        it can contain multiple items in which the keys are menu items. What
        happens when a menu item is selected depends on the associated value.
        If the value is a simple string (or number), that associated value is
        returned. If the value is a List or Dictionary it opens a submenu
        defined by the List or Dictionary.

        Menu items that open submenus have " ->" suffixed to them. For
        example, in the following menu option two opens a submenu:

            Select an option:
            1) Simple option
            2) This opens a submenu ->
            3) Another simple option
            Type number and <Enter> or click with mouse (empty cancels):

        To make the process of constructing menu {items} easier, two helper
        functions are available: |dn#util#menuAddOption()| and
        |dn#util#menuAddSubmenu()|.

        Lists are an ordered data type, and menu items provided by Lists are
        displayed in the same order as they occur in the List.  Dictionaries
        are an unordered data type, and menu items provided by Dictionaries
        are displayed in an arbitrary order unrelated to how the Dictionary
        was constructed.

        If no menu item is selected the function returns "". It is possible
        for an empty menu item to be provided to this function, and then
        selected and returned. There is no way to distinguish between that
        event and failure to select any item.

        The menu {prompt} defaults to "Select an option:".

dn#util#nowDay()                                           *dn#util#nowDay()*
        Returns the current say in month as an integer.

dn#util#nowMonth()                                       *dn#util#nowMonth()*
        Returns the current month as an integer.

dn#util#nowYear()                                         *dn#util#nowYear()*
        Returns the current year as a 4-digit integer.

                                                               *dn#util#os()*
dn#util#os()
        Determine operating system family: "windows", "unix" or "other".

                                                      *dn#util#padInternal()*
dn#util#padInternal({string}, {start}, {target}[, {char}])
        Inserts character {char} (defaults to space) into {string} at position
        {start} and continues inserting {char} until position {target}. Both
        {start} and {target} are integers.
        Returns the altered String.

        Example: >
        let l:string1 = "Column Twenty & Column Twenty One"
        let l:string2 = "Column Twenty Two & Column Twenty Three"
        let l:string1 = dn#util#padInternal(l:string1, 14, 18)
        echo l:string1  " Column Twenty     & Column Twenty One
        echo l:string2  " Column Twenty Two & Column Twenty Three
<
                                                          *dn#util#padLeft()*
dn#util#padLeft({string}, {length}[, {char}])
        Adds character {char} (defaults to space) to start of {string} until
        the string is {length} characters long. Returns the altered String. If
        the original string is already as long or longer than {length} it is
        returned unaltered.

                                                         *dn#util#padRight()*
dn#util#padRight({string}, {length}[, {char}])
        Adds character {char} (defaults to space) to end of {string} until the
        string is {length} characters long. Returns the altered String. If the
        original string is already as long or longer than {length} it is
        returned unaltered.

dn#util#prompt([{msg}])                                    *dn#util#prompt()*
        Display prompt message {msg} (defaults to "Press [Enter] to
        continue...").

dn#util#runtimepaths()                               *dn#util#runtimepaths()*
        Return list of available filetypes.

dn#util#scriptNumber({script})                       *dn#util#scriptNumber()*
        Get the SID/SNR number of a script. The complete script file name (not
        path) must be provided, including file extension.  Wild cards can be
        used (assume \V, i.e., very nomagic).

dn#util#selectWord()                                   *dn#util#selectWord()*
        Select the |:<cword>| under the cursor (must be only [0-9a-zA-Z_] and
        returns it. Returns "" if no <cword> can be selected.

dn#util#showFiletypes()                             *dn#util#showFiletypes()*
        Displays list of available filetypes in echo area.

dn#util#showMsg({msg}[, {type}])                          *dn#util#showMsg()*
        Displays message {msg} to user. Message {type} can be "generic",
        "warning", "info", "question" or "error" (defaults to "info").

dn#util#showRuntimepaths()                       *dn#util#showRuntimepaths()*
        Displays list of runtime paths in echo area.

dn#util#stringify({var}[, {quote}])                     *dn#util#stringify()*
        Convert variable {var} to a string value. If {quote} is present and
        true string values are quoted, i.e, defaults to false. Simple variable
        types are converted depending on type:

            Number      never quoted
            and Float

            String      return bare string if {quote} is false, otherwise
                        returns a string enclosed in single quotes with any
                        internal single quotes escaped by doubling them as ''
                        (see |literal-string|).

        More complex data types are converted as:

            List        subsidiary strings, numbers (integers) and floats are
                        treated as described above

            Dictionary  subsidiary strings, numbers (integers) and floats are
                        treated as described above, meaning all keys are
                        single-quoted, and perl-style "big arrow" key-value
                        notation used

            Funcrefs    uses in-built |string()| function to stringify

dn#util#stripLastChar({string})                     *dn#util#stripLastChar()*
        Removes the last character from {string} and returns the altered
        string.

dn#util#trimChar({string}[, {char}])                     *dn#util#trimChar()*
        Removes leading and trailing {char}s (defaults to space) from {string}
        and returns the trimmed string.

                                                  *dn#util#unusedFunctions()*
dn#util#unusedFunctions([{silent}[, {lower}[, {upper}]]])
        Checks the current buffer for functions defined in the buffer but not
        called in the buffer. By default the entire buffer is examined, but a
        smaller area can be analysed by providing the {lower} and {upper}
        bounds as line numbers.
        The function will abort if the buffer has any 'filetype' other than
        "vim".
        User feedback is displayed unless {silent} is true (defaults to
        false).
        Returns a |List| of unused functions (empty if none found).

dn#util#updateUserHelpTags()                   *dn#util#updateUserHelpTags()*
        Finds "doc" subdirectories of directories in the 'runtimepath' that
        begin with |$HOME|, and rebuilds help tags in those "doc"
        subdirectories one subdirectory at a time. In this way errors in one
        subdirectory do stop building helptags in other "doc" subdirectories.

dn#util#validPosInt({val})                            *dn#util#validPosInt()*
        Check whether value {val} is a valid positive integer. Zero is not
        considered a positive integer by this function. Returns a boolean
        value.

dn#util#varType({var})                                    *dn#util#varType()*
        Return the type of variable {var} as a string: "number", "string",
        "funcref", "List", "Dictionary", "float" or "unknown".

dn#util#warn({msg})                                          *dn#util#warn()*
        Displays warning message in error highlighting accompanied by
        system bell. The {msg} is expected to be a string or List of
        strings. Any non-string values are stringified with
        |dn#util#stringify()|. Each string obtained from {msg} is
        output on a separate line.

dn#util#wrap({msg}[, {hang}])                                *dn#util#wrap()*
        Echoes text {msg} but wraps it sensibly, breaking on characters '!',
        '@', '*', '-', '+', ';', ':', ',', '.', '/', '\', ?', ' ' and <Tab>.
        If a valid positive integer is provided for {hang}, a hanging indent
        of this size is prefixed to the second and subsequent lines of output.

==============================================================================
4. Mappings                                               *dn-utils-mappings*

An additional mapping not associated with a function.

                                     *<LocalLeader>ic* *dn-utils-initial-caps*
The mapping "<LocalLeader>ic", usually "\ic", converts text to initial
capitals in insert, normal and visual modes. The text converted is the
selection, if present, or line if there is no selection.

==============================================================================
5. Commands                                               *dn-utils-commands*

               *:Filetypes*
:Filetypes     Displays a list of available filetypes in the echo area.

               *:Scriptnames*
:Scriptnames   Like |:scriptnames|, lists all sourced script names in the order
               they were first sourced, except sends the output to the
               location list and opens a location window.

               *:Runtimepaths*
:Runtimepaths  Displays a list of runtime paths in the echo area.

 vim:tw=78:ts=8:ft=help:norl:
